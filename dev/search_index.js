var documenterSearchIndex = {"docs":
[{"location":"lib/private/#Internal-Documentation-1","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"lib/private/#","page":"Internals","title":"Internals","text":"Documentation for LAP_julia.jl's internal interface.","category":"page"},{"location":"lib/private/#Index-1","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/private/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"lib/private/#Functions-1","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"lib/private/#","page":"Internals","title":"Internals","text":"LAP_julia.gradient_points.gradient_magnitude\nLAP_julia.pad_images\nLAP_julia.rescale_intensities\nLAP_julia.clean_using_gaussain\nLAP_julia.mse\nLAP_julia.angle_rms\nLAP_julia.angle_mean\nLAP_julia.vec_len\nLAP_julia.mean\nLAP_julia.inpaint.inpaint_nans!\nLAP_julia.lap.multi_mat_div\nLAP_julia.lap.window_sum!","category":"page"},{"location":"lib/private/#LAP_julia.gradient_points.gradient_magnitude","page":"Internals","title":"LAP_julia.gradient_points.gradient_magnitude","text":"gradient_magnitude(f)\n\nReturn the directional derivatives (components of the gradient) and the gradient mag for both color and grayscale images. For spatialorder(f)==\"xy\", grad[1] is a derivative wrt x, the first coordinate and grad[2] wrt to the second...\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.pad_images","page":"Internals","title":"LAP_julia.pad_images","text":"pad_images(image1::Image, image2::Image)\n\nAdds zeros to the right and bottom of image1 and image2 to make them the same size.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.rescale_intensities","page":"Internals","title":"LAP_julia.rescale_intensities","text":"rescale_intensities(image1::Image, image2::Image)\n\nRescale image1 and image2 intensities to span the whole [0, 1].\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.clean_using_gaussain","page":"Internals","title":"LAP_julia.clean_using_gaussain","text":"clean_using_gaussain(u::Matrix{<:Number}, window_half_size_one_dim::Integer)\n\nClean the Matrix u by smoothing using a square 2D Gaussian filter of size 2 * window_half_size_one_dim + 1 in each dimension.\n\n\n\n\n\nclean_using_gaussain(u::Matrix{<:Number}, window_half_size)\n\nClean the Matrix u by smoothing using a 2D Gaussian filter of size 2 * window_half_size + 1.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.mse","page":"Internals","title":"LAP_julia.mse","text":"function mse(x, y)\n\nCalculates the mean squared error between x and y.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.angle_rms","page":"Internals","title":"LAP_julia.angle_rms","text":"function angle_rms(x, y)\n\nCalculate the root mean square error in angle between x and y. Output in degrees.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.angle_mean","page":"Internals","title":"LAP_julia.angle_mean","text":"function angle_mean(x, y)\n\nCalculate the mean error in angle between x and y. Output in degrees.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.vec_len","page":"Internals","title":"LAP_julia.vec_len","text":"function vec_len(x)\n\nCalculate the lenght of vector x. x is a complex number.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.mean","page":"Internals","title":"LAP_julia.mean","text":"function mean(x)\n\nCalculate the mean of x.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.inpaint.inpaint_nans!","page":"Internals","title":"LAP_julia.inpaint.inpaint_nans!","text":"inpaint_nans!(flow::Flow)\n\nInpaint NaNs in flow using surrounding non-NaN values.\n\nReferences\n\nOliveira, Manuel & Bowen, Brian & McKenna, Richard & Chang, Yu-Sung. (2001). Fast Digital Image Inpainting.. 261-266. Here.\n\nSee also: showflow, Flow\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.lap.multi_mat_div","page":"Internals","title":"LAP_julia.lap.multi_mat_div","text":"multi_mat_div(A, b)\n\nReturn E, where E[i, :] is the solutution of the least squares problem minD_ix - c_i^2 for each D_i and c_i, where D_i is A[:, :, i], c_i is b[:, i] and i is the size of the second dimension of b and third dimension of A. In other words, each row of E is the solution to one matrix from A and it's corresponding vector from b.\n\n\n\n\n\n","category":"function"},{"location":"lib/private/#LAP_julia.lap.window_sum!","page":"Internals","title":"LAP_julia.lap.window_sum!","text":"function window_sum!(filter_result, pixels, image_size, window_size)\n\nFilter the array pixels of shape image_size with a filter that performs a sum of values of the area window_size with each pixel as the center. Store the result in filter_result. The filtering uses \"symmetric\" padding.\n\n\n\n\n\n","category":"function"},{"location":"man/guide/#Usage-1","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"man/examples/examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"pages = [\"examples.md\"]\nDepth = 3","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here I will show how the basic methods work on different kinds of displacements. I use the word displacement and flow interchangeably. To see how to display the results check out the Visualisation Functions section.","category":"page"},{"location":"man/examples/examples/#Generate-test-flows-1","page":"Examples","title":"Generate test flows","text":"","category":"section"},{"location":"man/examples/examples/#Unifrom-1","page":"Examples","title":"Unifrom","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using LAP_julia # hide\nusing PyPlot\n# Set some parameters:\nex_size = (256, 256)\nex_max_magnitude = 20\nex_tile_size = 999 # This makes the flow uniform\n\n# Generate a random uniform flow\nuni_flow = gen_rand_flow(ex_size, ex_max_magnitude, ex_tile_size);\n\n# Lets check what the flow looks like:\nshowflow(uni_flow, figtitle=\"Uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_rand_flow, showflow","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-1","page":"Examples","title":"Non-uniform Smooth","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using LAP_julia # hide\nusing PyPlot\n# Set some parameters:\nex_size = (256, 256)\nex_max_magnitude = 20\nex_tile_size = 60\n\n# Generate a random uniform flow\nsmooth_flow = gen_rand_flow(ex_size, ex_max_magnitude, ex_tile_size);\n\n# Lets check what the flow looks like:\nshowflow(smooth_flow, figtitle=\"Smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_rand_flow, showflow","category":"page"},{"location":"man/examples/examples/#Generate-test-images-1","page":"Examples","title":"Generate test images","text":"","category":"section"},{"location":"man/examples/examples/#Chessboard-1","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Normal","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess = gen_chess(64, 4)\nimgshow(chess, figtitle=\"Chessboard\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_chess","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess = gen_chess(64, 4)","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with uni_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess_uni_warped = warp_img(chess, -real(uni_flow), -imag(uni_flow))\nimgshowflow(chess_uni_warped, uni_flow, figtitle=\"Chessboard uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with smooth_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess_smooth_warped = warp_img(chess, -real(smooth_flow), -imag(smooth_flow))\nimgshowflow(chess_smooth_warped, smooth_flow, figtitle=\"Chessboard smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: warp_img, imgshowflow","category":"page"},{"location":"man/examples/examples/#Lena-1","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Normal","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using TestImages\nlena = testimage(\"lena_gray\")\n# The Lena image from TestImages has elements of type ColorTypes.Gray{FixedPointNumbers.Normed{UInt8,8}}\n# so to use our algorithms later we need to convert them to floats.\nlena = Float32.(lena)\n\n# set the origin to lower left corner of the image\nlena = reverse(lena, dims=1)\nimgshow(lena, figtitle=\"Lena\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using TestImages\nlena = testimage(\"lena_gray\")\n\n# The Lena image from TestImages has elements of type ColorTypes.Gray{FixedPointNumbers.Normed{UInt8,8}} so we convert it to Float32.\nlena = Float32.(lena)\n\nlena = reverse(lena, dims=1)","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with uni_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"lena_uni_warped = warp_img(lena, -real(uni_flow), -imag(uni_flow))\nimgshowflow(lena_uni_warped, uni_flow, figtitle=\"Lena uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with smooth_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"lena_smooth_warped = warp_img(lena, -real(smooth_flow), -imag(smooth_flow))\nimgshowflow(lena_smooth_warped, smooth_flow, figtitle=\"Lena smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: warp_img, imgshowflow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"man/examples/examples/#single_lap-function-1","page":"Examples","title":"single_lap function","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here are examples of using the single_lap function to find the flow between the original and the warped image. I will show the results of the algorithm for an image warped by a uniform flow and a smoothly varying flow. (The code running is the same.)","category":"page"},{"location":"man/examples/examples/#Uniform-Flow-1","page":"Examples","title":"Uniform Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a uniform flow. First we have to choose a filter_half_size which has to be the same or higher that the ex_max_magnitude chosen. Then we choose the window_size parameter of the algorithm, usually a list like this: [2*filter_half_size + 1, 2*filter_half_size + 1].","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save original\nshowflow(uni_flow, figtitle=\"Original Uniform Flow\")\nsavefig(\"orig_uni_flow.png\")","category":"page"},{"location":"man/examples/examples/#Chessboard-2","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(chess, chess_uni_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out single_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Uniform Flow\")\nsavefig(\"single_chess_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-2","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(lena, lena_uni_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out single_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Uniform Flow\")\nsavefig(\"single_lena_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-Flow-1","page":"Examples","title":"Non-uniform Smooth Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a non-uniform smoothly varying flow.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save original\nshowflow(smooth_flow, figtitle=\"Original smooth flow\")\nsavefig(\"orig_smooth_flow.png\")","category":"page"},{"location":"man/examples/examples/#Chessboard-3","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(chess, chess_smooth_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Smooth Flow\")\nsavefig(\"single_chess_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-3","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(lena, lena_smooth_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Smooth Flow\")\nsavefig(\"single_lena_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"man/examples/examples/#polyfilter_lap-function-1","page":"Examples","title":"polyfilter_lap function","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here are examples of using the polyfilter_lap function to find the flow between the original and the warped image. I will show the results of the algorithm for an image warped by a uniform flow and a smoothly varying flow. (The code running is the same.)","category":"page"},{"location":"man/examples/examples/#Uniform-Flow-2","page":"Examples","title":"Uniform Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a uniform flow.","category":"page"},{"location":"man/examples/examples/#Chessboard-4","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(chess, chess_uni_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out polyfilter_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Uniform Flow\")\nsavefig(\"polyfilter_chess_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-4","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(lena, lena_uni_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out polyfilter_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Uniform Flow\")\nsavefig(\"polyfilter_lena_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-2","page":"Examples","title":"Non-uniform Smooth","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a non-uniform smooth flow.","category":"page"},{"location":"man/examples/examples/#Chessboard-5","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"estim_flow, source_reg = polyfilter_lap(chess, chess_smooth_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Smooth Flow\")\nsavefig(\"polyfilter_chess_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-5","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(lena, lena_smooth_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Smooth Flow\")\nsavefig(\"polyfilter_lena_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"lib/public/#Public-Documentation-1","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for LAP_julia.jl's public interface.","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"lib/public/#Contents-1","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#Algorithm-Functions-1","page":"Public","title":"Algorithm Functions","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"single_lap\npolyfilter_lap","category":"page"},{"location":"lib/public/#LAP_julia.lap.single_lap","page":"Public","title":"LAP_julia.lap.single_lap","text":"single_lap(image_1::Image, image_2::Image, filter_half_size::Integer, window_size, filter_num::Integer=3)\n\nReturn an estimate of a smoothly varying flow of size of image_1 which is the displacement that transforms image_2 closer to image_1.\n\nArguments:\n\nimage_1::Image: grayscale image 1.\nimage_2::Image: grayscale image 2.\nfilter_num::Integer=3: the number of basis filters used (so far only =3 implemented).\nfilter_half_size: the half size of the base of the gaussian filters used.\nwindow_size: the size of the local window (list of 2 ints) usually same as filter_size.\n\nSee also: polyfilter_lap, showflow, warp_imgshowflow, imgshowflow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#LAP_julia.lap.polyfilter_lap","page":"Public","title":"LAP_julia.lap.polyfilter_lap","text":"polyfilter_lap(target::Image, source::Image; filter_num::Integer=3, max_repeats::Integer=1, display::Bool=true)\n\nFind a transformation flow (complex displacment field), that transforms image source to image target.\n\nArguments\n\ntarget::Image: the image we want source to look like.\nsource::Image: warped image we want to transform into target.\nfilter_num::Integer=3: the number of basis filters used in single_lap calls (so far only =3 implemented).\nmax_repeats::Integer=1: the maximum number of times an iteration of one filter size can be repeated.\ndisplay::Bool=true: use verbose prints and return an array of figures.\n\nOutputs\n\nflow::Flow: is the complex vector field that transforms source closer to target.\nsource_reg::Image: is the image source transformed by flow.\n[figs::Matrix{Figure}: is a 2D array of PyPlot Figures which shows the work of the algorithm at each iteration.\n\nFor each iteration there are 3 Figures in this order: 1) current u_est, 2) newest addition to u_est Δ_u, 3) current source_reg.]\n\nDescribtion\n\nImplements the basic concept of Algorithm 2 from the paper without some features. It uses single_lap iteratively; in each iteration using the transformation estimated by single_lap to warp the source image closer to the target image and then using this warped closer image as the source image in the next iteration, while using progressively smaller filter_half_sizes to estimate even small and faster varying displacements.\n\nSee also: single_lap, imgshow,imgshowflow, warp_imgshowflow, Flow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Visualisation-Functions-1","page":"Public","title":"Visualisation Functions","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"showflow\nimgshowflow\nimgshow\nwarp_imgshowflow","category":"page"},{"location":"lib/public/#LAP_julia.visualise.showflow","page":"Public","title":"LAP_julia.visualise.showflow","text":"showflow(flow::Flow; <keyword arguments>)\n\nReturn a figure with the displacement field flow by default skipping some vectors to make it easy to read.\n\nArguments\n\nflow::Flow: the vector flow to be plotted.\nskip_count=nothing: the number of vectors to skip between each displayed vector. By default set so that the output is 20  20 vectors.\nfig=nothing: add a figure to plot in. By defaults creates a blank new figure.\nmag::Real=1: magnify the plotted vectors.\nkey::Bool=true: add key with maximum vector length.\nfigtitle::String=\"Flow\": add title to the figure.\nret::Symbol=:figure: set return object, by default returns Figure, other options: :pyobject returns a PyObject. (Using figure makes Juno directly plot.)\n\nSee also: imgshow, imgshowflow, warp_imgshowflow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#LAP_julia.visualise.imgshowflow","page":"Public","title":"LAP_julia.visualise.imgshowflow","text":"imgshowflow(img, flow; <keyword arguments>)\n\nReturn a figure with an image img and displacement field flow.\n\nArguments\n\nimg: the image to be plotted.\nflow::Flow: the vector flow to be plotted.\nskip_count=nothing: the number of vectors to skip between each displayed vector. By default set so that the output is 20  20 vectors.\nfig=nothing: add a figure to plot in. By defaults creates a blank new figure.\nmag::Real=1: magnify the plotted vectors.\nkey::Bool=true: add key with maximum vector length.\nfigtitle::String=\"Iamge with Flow\": add title to the figure.\nret::Symbol=:figure: set return object, by default returns Figure, other options: :pyobject returns a PyObject. (Using figure makes Juno directly plot.)\n\nSee also: imgshow, showflow, warp_imgshowflow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#LAP_julia.visualise.imgshow","page":"Public","title":"LAP_julia.visualise.imgshow","text":"imgshow(img; <keyword arguments>)\n\nReturn a figure with image img. Plot origin is in the botom left.\n\nArguments\n\nfig=nothing: add a figure to plot in. By defaults creates a blank new figure.\nfigtitle::String=\"Image\": add title to the figure.\nret::Symbol=:figure: set return object, by default returns Figure, other options: :pyobject returns a PyObject. (Using figure makes Juno directly plot.)\n\nSee also: showflow, imgshowflow, warp_imgshowflow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#LAP_julia.visualise.warp_imgshowflow","page":"Public","title":"LAP_julia.visualise.warp_imgshowflow","text":"warp_imgshowflow(img, flow; <keyword arguments>)\n\nReturn a figure with an image and a displacement field, where the image is warped by the displacement field.\n\nArguments\n\nimg: the image to be plotted.\nflow::Flow: the vector flow to be plotted.\nskip_count=nothing: the number of vectors to skip between each displayed vector. By default set so that the output is 20  20 vectors.\nfig=nothing: add a figure to plot in. By defaults creates a blank new figure.\nmag::Real=1: magnify the plotted vectors.\nkey::Bool=true: add key with maximum vector length.\nfigtitle::String=\"Iamge with Flow\": add title to the figure.\nret::Symbol=:figure: set return object, by default returns Figure, other options: :pyobject returns a PyObject. (Using figure makes Juno directly plot.)\n\nSee also: imgshow, showflow, imgshowflow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Generate-Data-Functions-1","page":"Public","title":"Generate-Data Functions","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"gen_rand_flow\ngen_chess","category":"page"},{"location":"lib/public/#LAP_julia.data_gen.gen_rand_flow","page":"Public","title":"LAP_julia.data_gen.gen_rand_flow","text":"gen_rand_flow(flow_size::Tuple{T, T}=(200, 200), max_magnitude::Real=20, tile_size=nothing; filter_amp=nothing)::Flow where {T <: Integer}\n\nGenerate a smoothly varying random flow. The flow parameters are set by the function arguments.\n\nIt works by generating a tiled flow where each tile has a random uniform flow. Then it smooths these tiles by filtering with a gaussian.\n\nArguments\n\nflow_size::Tuple{T, T}=(200, 200): dimensions of the flow.\nmax_magnitude::Real=20: maximum allowed amplitude of the displacement.\ntile_size=nothing: size of random uniform flow tiles that make up the start matrix. (The larger the slower the flow.) Note: If set to flow_size or larger it will generate a uniform pixel shift in a random direction.\nfilter_amp=nothing: size of the gaussian filter which is used to smooth the random start matrix.\n\nSee also: showflow, Flow, gen_chess\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#LAP_julia.data_gen.gen_chess","page":"Public","title":"LAP_julia.data_gen.gen_chess","text":"gen_chess(tile_size::Integer=50, board_size::Integer=4)\n\nCreate a chessboard image with board_size tiles in each dimension, where each tile is tile_size pixels in each dimension. Note that board_size has to be even.\n\nSee also: imgshow, gen_rand_flow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Types-1","page":"Public","title":"Types","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Image\nFlow","category":"page"},{"location":"lib/public/#LAP_julia.Image","page":"Public","title":"LAP_julia.Image","text":"Image{T} = Matrix{T} where T <: Real\n\nImage is a Matrix with elements that are Real.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#LAP_julia.Flow","page":"Public","title":"LAP_julia.Flow","text":"Flow{T} = Matrix{Complex{T}} where T <: Real\n\nFlow is a Matrix with elements that are Complex.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#Interpolation-1","page":"Public","title":"Interpolation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"warp_img","category":"page"},{"location":"lib/public/#LAP_julia.interpolation.warp_img","page":"Public","title":"LAP_julia.interpolation.warp_img","text":"function warp_img(img, dx, dy; border_strat::Symbol=:replicate)\n\nWarp the image img by dx in x direction and by dy in y direction.\n\nborder_strat indicates how to act when the resulting coordinate outside of bounds of img. Values: :replicate, :zeros.\n\nSee also: showflow, imgshowflow, Flow\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Other-1","page":"Public","title":"Other","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"LAP_julia.gradient_points.find_keypoints_from_gradients","category":"page"},{"location":"lib/public/#LAP_julia.gradient_points.find_keypoints_from_gradients","page":"Public","title":"LAP_julia.gradient_points.find_keypoints_from_gradients","text":"find_keypoints_from_gradients{T,N}(f::Image{T,N}; spacing = 10, numbe = 100, sigma = ones(Float64, N), nlength = 1., mask = [])\n\nTake a color or grayscale image and return SimpleKeypoints located at high-gradient positions of the image f. Returns number keypoints at least spacing pixels apart. If this is not possible, returns less keypoints. sigma is the Gaussian filter size. You can suppress keypoint creation at some locations by setting particular voxels in mask to 0. Sizes of mask and f should be equal.\n\nThe coordinates are in physical units.\n\n\n\n\n\n","category":"function"},{"location":"#LAP_julia.jl-1","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Image registration in Julia","category":"page"},{"location":"#Installation-1","page":"LAP_julia.jl","title":"Installation","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"To install paste this into a Julia terminal:","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"using Pkg; Pkg.add(PackageSpec(url=\"https://github.com/Kunz-David/LAP_julia\"))","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"note: Linux\nThe plotting functions use Julia's PyPlot module and Matplotlib has to be installed in your default Python. You can either install Matplotlib in your Python or let Julia use the Python it installed and manages. For that set ENV[PYTHON] to the Python installed by Julia. So something like this, will do the trick:ENV[\"PYTHON\"] = \"..ENTER USER.../.julia/conda/3/bin\"","category":"page"},{"location":"#Manual-Outline-1","page":"LAP_julia.jl","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/doctests.md\",\n    \"man/hosting.md\",\n    \"man/latex.md\",\n    \"man/contributing.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-Outline-1","page":"LAP_julia.jl","title":"Library Outline","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Pages = [\"lib/public.md\", \"lib/private.md\"]","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"<!– ```@example using LAPjulia flow = genrand_flow() showflow(flow)","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"@contents ```","category":"page"}]
}
