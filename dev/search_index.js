var documenterSearchIndex = {"docs":
[{"location":"lib/private/#Internal-Documentation-1","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"lib/private/#","page":"Internals","title":"Internals","text":"Documentation for LAP_julia.jl's internal interface.","category":"page"},{"location":"lib/private/#Functions-1","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"lib/private/#","page":"Internals","title":"Internals","text":"Modules = [LAP_julia, LAP_julia.registration, LAP_julia.visualise, LAP_julia.inpaint, LAP_julia.gradient_points, LAP_julia.data_gen, LAP_julia.interpolation]\nPublic = false","category":"page"},{"location":"man/guide/#Usage-1","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"man/examples/examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"pages = [\"examples.md\"]\nDepth = 3","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here I will show how the basic methods work on different kinds of displacements. I use the word displacement and flow interchangeably.","category":"page"},{"location":"man/examples/examples/#Generate-test-flows-1","page":"Examples","title":"Generate test flows","text":"","category":"section"},{"location":"man/examples/examples/#Unifrom-1","page":"Examples","title":"Unifrom","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using LAP_julia # hide\nusing PyPlot\n# Set some parameters:\nex_size = (256, 256)\nex_max_magnitude = 20\nex_tile_size = 999 # This makes the flow uniform\n\n# Generate a random uniform flow\nuni_flow = gen_tiled_flow(ex_size, ex_max_magnitude, ex_tile_size);\n\n# Lets check what the flow looks like:\nshowflow(uni_flow, figtitle=\"Uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_tiled_flow, showflow","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-1","page":"Examples","title":"Non-uniform Smooth","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using LAP_julia # hide\nusing PyPlot\n# Set some parameters:\nex_size = (256, 256)\nex_max_magnitude = 20\nex_tile_size = 60\n\n# Generate a random uniform flow\nsmooth_flow = gen_tiled_flow(ex_size, ex_max_magnitude, ex_tile_size);\n\n# Lets check what the flow looks like:\nshowflow(smooth_flow, figtitle=\"Smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_tiled_flow, showflow","category":"page"},{"location":"man/examples/examples/#Generate-test-images-1","page":"Examples","title":"Generate test images","text":"","category":"section"},{"location":"man/examples/examples/#Chessboard-1","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Normal","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess = gen_chess(64, 4)\nimgshow(chess, figtitle=\"Chessboard\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: gen_chess","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess = gen_chess(64, 4)","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with uni_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess_uni_warped = warp_img(chess, -real(uni_flow), -imag(uni_flow))\nimgshowflow(chess_uni_warped, uni_flow, figtitle=\"Chessboard uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with smooth_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"chess_smooth_warped = warp_img(chess, -real(smooth_flow), -imag(smooth_flow))\nimgshowflow(chess_smooth_warped, smooth_flow, figtitle=\"Chessboard smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: warp_img, imgshowflow","category":"page"},{"location":"man/examples/examples/#Lena-1","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Normal","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using TestImages\nlena = testimage(\"lena_gray\")\n# The Lena image from TestImages has elements of type ColorTypes.Gray{FixedPointNumbers.Normed{UInt8,8}}\n# so to use our algorithms later we need to convert them to floats.\nlena = Float32.(lena)\n\nimgshow(lena, figtitle=\"Lena\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"using TestImages\nlena = testimage(\"lena_gray\")\n\n# The Lena image from TestImages has elements of type ColorTypes.Gray{FixedPointNumbers.Normed{UInt8,8}} so we convert it to Float32.\nlena = Float32.(lena)","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with uni_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"lena_uni_warped = warp_img(lena, -real(uni_flow), -imag(uni_flow))\nimgshowflow(lena_uni_warped, uni_flow, figtitle=\"Lena uniform warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Warped with smooth_flow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"lena_smooth_warped = warp_img(lena, -real(smooth_flow), -imag(smooth_flow))\nimgshowflow(lena_smooth_warped, smooth_flow, figtitle=\"Lena smooth warp\")","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out the used functions: warp_img, imgshowflow","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"man/examples/examples/#single_lap-function-1","page":"Examples","title":"single_lap function","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here are examples of using the single_lap function to find the flow between the original and the warped image. I will show the results of the algorithm for an image warped by a uniform flow and a smoothly varying flow. (The code running is the same.)","category":"page"},{"location":"man/examples/examples/#Uniform-Flow-1","page":"Examples","title":"Uniform Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a uniform flow. First we have to choose a filter_half_size which has to be the same or higher that the ex_max_magnitude chosen. Then we choose the window_size parameter of the algorithm, usually a list like this: [2*filter_half_size + 1, 2*filter_half_size + 1].","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save original\nshowflow(uni_flow, figtitle=\"Original Uniform Flow\")\nsavefig(\"orig_uni_flow.png\")","category":"page"},{"location":"man/examples/examples/#Chessboard-2","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(chess, chess_uni_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out single_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Uniform Flow\")\nsavefig(\"single_chess_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-2","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(lena, lena_uni_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out single_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Uniform Flow\")\nsavefig(\"single_lena_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-Flow-1","page":"Examples","title":"Non-uniform Smooth Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a non-uniform smoothly varying flow.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save original\nshowflow(smooth_flow, figtitle=\"Original smooth flow\")\nsavefig(\"orig_smooth_flow.png\")","category":"page"},{"location":"man/examples/examples/#Chessboard-3","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(chess, chess_smooth_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Smooth Flow\")\nsavefig(\"single_chess_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-3","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow = single_lap(lena, lena_smooth_warped, filter_half_size, window_size)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Single Estimated Smooth Flow\")\nsavefig(\"single_lena_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"man/examples/examples/#polyfilter_lap-function-1","page":"Examples","title":"polyfilter_lap function","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Here are examples of using the polyfilter_lap function to find the flow between the original and the warped image. I will show the results of the algorithm for an image warped by a uniform flow and a smoothly varying flow. (The code running is the same.)","category":"page"},{"location":"man/examples/examples/#Uniform-Flow-2","page":"Examples","title":"Uniform Flow","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a uniform flow.","category":"page"},{"location":"man/examples/examples/#Chessboard-4","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(chess, chess_uni_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out polyfilter_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Uniform Flow\")\nsavefig(\"polyfilter_chess_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-4","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(lena, lena_uni_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check out polyfilter_lap.","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Uniform Flow\")\nsavefig(\"polyfilter_lena_estim_uni_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Non-uniform-Smooth-2","page":"Examples","title":"Non-uniform Smooth","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"This how the algorithm performs on a non-uniform smooth flow.","category":"page"},{"location":"man/examples/examples/#Chessboard-5","page":"Examples","title":"Chessboard","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"estim_flow, source_reg = polyfilter_lap(chess, chess_smooth_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Smooth Flow\")\nsavefig(\"polyfilter_chess_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"man/examples/examples/#Lena-5","page":"Examples","title":"Lena","text":"","category":"section"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Run:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"filter_half_size = 20\nwindow_size = [2*filter_half_size + 1, 2*filter_half_size + 1]\n\nestim_flow, source_reg = polyfilter_lap(lena, lena_smooth_warped, display=false)\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Check the results:","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"# save estimation\nshowflow(estim_flow, figtitle=\"Polyfilter Estimated Smooth Flow\")\nsavefig(\"polyfilter_lena_estim_smooth_flow.png\")\nnothing # hide","category":"page"},{"location":"man/examples/examples/#","page":"Examples","title":"Examples","text":"Original Estimated\n(Image: ) (Image: )","category":"page"},{"location":"lib/public/#Public-Documentation-1","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for LAP_julia.jl's public interface.","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"lib/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#Types-1","page":"Public","title":"Types","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Modules = [LAP_julia, LAP_julia.registration, LAP_julia.visualise, LAP_julia.inpaint, LAP_julia.gradient_points, LAP_julia.data_gen, LAP_julia.interpolation]\nOrder = [:type]\nPrivate = false","category":"page"},{"location":"lib/public/#Functions-1","page":"Public","title":"Functions","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Modules = [LAP_julia, LAP_julia.registration, LAP_julia.visualise, LAP_julia.inpaint, LAP_julia.gradient_points, LAP_julia.data_gen, LAP_julia.interpolation]\nOrder = [:function]\nPrivate = false","category":"page"},{"location":"#LAP_julia.jl-1","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Image registration in Julia","category":"page"},{"location":"#Installation-1","page":"LAP_julia.jl","title":"Installation","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"To install paste this into a Julia terminal:","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"using Pkg; Pkg.add(PackageSpec(url=\"https://github.com/Kunz-David/LAP_julia\"))","category":"page"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"note: Linux\nThe plotting functions use Julia's PyPlot module and Matplotlib has to be installed in your default Python. You can either install Matplotlib in your Python or let Julia use the Python it installed and manages. For that set ENV[PYTHON] to the Python installed by Julia. So something like this, will do the trick:ENV[\"PYTHON\"] = \"..ENTER USER.../.julia/conda/3/bin\"","category":"page"},{"location":"#Manual-Outline-1","page":"LAP_julia.jl","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/doctests.md\",\n    \"man/hosting.md\",\n    \"man/latex.md\",\n    \"man/contributing.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-Outline-1","page":"LAP_julia.jl","title":"Library Outline","text":"","category":"section"},{"location":"#","page":"LAP_julia.jl","title":"LAP_julia.jl","text":"Pages = [\"lib/public.md\", \"lib/private.md\"]","category":"page"}]
}
